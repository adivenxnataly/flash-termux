#!/data/data/com.termux/files/usr/bin/python3

import os
import sys
import time
import zipfile
import subprocess
import threading
from pathlib import Path

r3 = "\033[31m"
y1 = "\033[33m"
g1 = "\033[32m"
b1 = "\033[34m"
r5 = "\033[0m"

b = "\033[1m"
r = "\033[0m"

progress_percent = 0
progress_active = True

def error(msg):
    global progress_active
    progress_active = False
    print(f"\n{r3}ERROR:{r5} {msg}")
    sys.exit(1)

def format_size(size):
    for unit in ['B', 'KB', 'MB', 'GB']:
        if size < 1024.0:
            return f"{size:.1f} {unit}"
        size /= 1024.0
    return f"{size:.1f} TB"

def animate_progress():
    global progress_percent
    dots = ['   ', '.  ', '.. ', '...']
    i = 0
    
    while progress_active:
        sys.stdout.write(f"\r{y1}[{progress_percent:3d}%]{r5} Extracting{dots[i % 4]}")
        sys.stdout.flush()
        i += 1
        time.sleep(0.3)
    
    # Cleanup akhir
    if progress_percent == 100:
        sys.stdout.write(f"\r{g1}[100%]{r5} Extraction complete!{' '*10}{r5}\n")
    else:
        sys.stdout.write(f"\r{r3}[ERROR]{r5} Process interrupted!{' '*10}{r5}\n\n")

def extract_zip(archive):
    global progress_percent
    
    try:
        with zipfile.ZipFile(archive, 'r') as zip_ref:
            file_list = zip_ref.infolist()
            total_files = len(file_list)
            
            for i, file in enumerate(file_list):
                zip_ref.extract(file)
                progress_percent = int((i + 1) / total_files * 100)
                
    except Exception as e:
        error(f"{r3} ZIP extraction failed: {str(e)}")

def extract_tar(archive):
    global progress_percent
    
    cmd = f"pv -n {archive} | tar -xzf -"
    process = subprocess.Popen(cmd, shell=True,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE,
                             universal_newlines=True)
    
    for line in process.stderr:
        if line.strip().isdigit():
            progress_percent = int(line.strip())
    
    if process.wait() != 0:
        error(f"{r3} tar extraction failed!")

def extract_rar(archive):
    global progress_percent
    
    result = subprocess.run(['unrar', 'x', archive], capture_output=True)
    if result.returncode != 0:
        error(f"unrar failed: {result.stderr.decode()}")
    progress_percent = 100

def extract_zstd(archive):
    global progress_percent
    
    if subprocess.run(['zstd', '-d', '-f', archive]).returncode != 0:
        error(f"{r3} zstd decompression failed!")
    progress_percent = 100

def main():
    global progress_active, progress_percent
    
    if len(sys.argv) < 2:
        error("Usage: flash-extract <file>")

    file = Path(sys.argv[1])
    if not file.exists():
        error(f"File not found: {file}")

    missing = []
    for cmd in ['pv', 'tar', 'zstd', 'unrar']:
        try:
            subprocess.run([cmd, '--version'],
                         stdout=subprocess.DEVNULL,
                         stderr=subprocess.DEVNULL)
        except:
            missing.append(cmd)
    
    if missing:
        error(f"{r3} Missing: {' '.join(missing)}\n{r5} Install with:{y1} pkg install {' '.join(missing)}")

    print(f"\n{b1}╭─ File Info ──────────────────────────────{r5}{r}")
    print(f"{b1}│ {y1}Archive:{r5} {file.name}")
    print(f"{b1}│ {y1}Size:{r5} {format_size(file.stat().st_size)}")
    print(f"{b1}│ {y1}Format:{r5} {file.suffix}")
    print(f"{b1}╰──────────────────────────────────────────{r5}")

    progress_thread = threading.Thread(target=animate_progress)
    progress_thread.start()

    try:
        if file.suffix == '.zip':
            extract_zip(file)
        elif file.suffix in ('.tar.gz', '.tgz'):
            extract_tar(file)
        elif file.suffix == '.zst':
            extract_zstd(file)
        elif file.suffix == '.rar':
            extract_rar(file)
        else:
            error(f"Unsupported format: {file.suffix}")
        
        progress_percent = 100
        
    except Exception as e:
        error(str(e))
    finally:
        progress_active = False
        progress_thread.join()

    print(f"{g1}SUCCESS:{r5} files ready in current directory")

if __name__ == "__main__":
    main()
